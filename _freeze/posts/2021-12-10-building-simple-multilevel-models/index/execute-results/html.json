{
  "hash": "69bd6ee85c3de1acb99bbd79b4017f21",
  "result": {
    "markdown": "---\ntitle: \"Building simple multilevel models with {brms}\"\nauthor: \"Shane A. Scaggs\"\ndate: \"2021-12-10\"\ncategories: \n  - statistics\n  - Bayesian\n  - modeling\n  - data analysis\nimage: \"lines.jpg\"\n---\n\n::: {.cell}\n\n:::\n\n\nMultilevel models are a kind of statistical model that estimate parameters at more than one level. They are very useful kind of model because they are suited to the hierarchical and nested organization of the world around us. In this post, I will demonstrate how to build, describe, and compare multilevel models using tools from `brms`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(mc.cores = parallel::detectCores(), scipen = 0)\n#install.packages('rstan')\n#install.packages('brms')\nlibrary(brms)\nlibrary(tidybayes)\nlibrary(tidyverse)\nlibrary(modelr)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nFor this demonstration, let's model the `palmerpenguins` dataset made available on github by [Allison Horst](https://allisonhorst.github.io/palmerpenguins/articles/intro.html#exploring-factors-1). These data contain morphometrics for three species of penguins -- Chinstrap, Gentoo, and Adelie -- and the names of the islands they inhabit in Antarctica.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#remotes::install_github('allisonhorst/palmerpenguins')\nlibrary(palmerpenguins)\ndata('penguins')\nd <- penguins\nhead(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n:::\n:::\n\n\n## Start simple\n\nLet's model penguin body mass (`body_mass_g`). A simple starting model would be to estimate the central tendency and variation in body masses across all penguins. We can do this by estimating the parameters mu ($\\mu$) and sigma ($\\sigma$) with a Gaussian family.\n\nFor now, we will use the default `brms` priors. You can view them by calling the model formula, data, and family:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_prior(body_mass_g ~ 1, \n          family = gaussian(), data = d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                     prior     class coef group resp dpar nlpar lb ub  source\n student_t(3, 4050, 889.6) Intercept                                  default\n    student_t(3, 0, 889.6)     sigma                             0    default\n```\n:::\n:::\n\n\nThe model formula is truly as simple as it can be: `body_mass_g ~ 1`. We estimate a single fixed intercept.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod0 <- brm(family = gaussian(), data = d,\n            body_mass_g ~ 1)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nWe can examine the posterior estimates using `posterior_summary()`, which returns all fixed and random effect estimate by a `<brmsfit>` object. According to this model, the mean body mass (g) of all the Penguins is `4200.43`, surrounded by `44.09` grams of error. This value is comparable to the value computed using `base` `R` (mean = 4201.75). This model also estimates a `sigma` value of `802.90`, which is comparable to the standard deviation (sd = 801.95)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nposterior_summary(mod0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               Estimate   Est.Error        Q2.5       Q97.5\nb_Intercept  4202.24405 43.93026876  4115.67686  4289.96055\nsigma         804.00584 31.13987362   746.30603   865.65799\nlprior        -15.39316  0.03575543   -15.46696   -15.32878\nlp__        -2781.47280  0.98978812 -2784.21080 -2780.48072\n```\n:::\n:::\n\n\nIf we generate `4000` draws from this model, and graph them, the distribution looks something like this:\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![Posterior distribution of body mass (g).](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='left' width=384}\n:::\n:::\n\n\n## Species variation, fixed and random\n\nA sensible biologist might point out that body mass probably varies across each species of penguin. We can assess this by adding a **fixed effect** of species to our model that will estimate the body mass for each species. It will not, however, help us understand how body mass varies *within* each species. To do that, we need estimate **random intercepts** for each species group. We'll fit both models to illustrate the difference.\n\nFor the fixed effect model, we add the `species` factor to our model formula:\n\n> `body_mass_g ~ 1 + species`\n\nto estimate a fixed intercept for each of the species groups in the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod1a <- brm(data = d, family = gaussian(),\n             body_mass_g ~ 1 + species)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nWe can examine the estimates by calling the model object inside the `fixef()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfixef(mod1a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   Estimate Est.Error      Q2.5     Q97.5\nIntercept        3700.37120  37.96947 3625.6048 3775.4012\nspeciesChinstrap   32.04647  69.86787 -103.5716  166.4651\nspeciesGentoo    1375.05357  56.24715 1265.7608 1482.2137\n```\n:::\n:::\n\n\nHere we see that the body mass of `Adelie` -- the reference category for `Intercept` -- and `Chinstrap` differ by just over `30` grams, while the mean for `Gentoo` is more than `1000` grams larger. Just how much these body mass measurements overlap is easier to see if we graph the posterior.\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![Posterior distribution of body mass (g) for each penguin species.](index_files/figure-html/unnamed-chunk-13-1.png){fig-align='left' width=480}\n:::\n:::\n\n\nTo estimate random intercepts for each species, rather than fixed intercepts, we use the following model formula:\n\n> `body_mass_g ~(1|species)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod1b <- brm(data = d, family = gaussian(),\n             body_mass_g ~ (1|species))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nThis model estimates a \"global\" fixed intercept:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfixef(mod1b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Estimate Est.Error     Q2.5    Q97.5\nIntercept  4130.29  459.9165 3156.383 5029.404\n```\n:::\n:::\n\n\nand then separate random intercepts for each species, reported as differences from the global intercept:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nranef(mod1b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$species\n, , Intercept\n\n           Estimate Est.Error        Q2.5     Q97.5\nAdelie    -427.7364  461.8709 -1340.36322  554.2313\nChinstrap -394.6471  461.6474 -1314.66820  588.0133\nGentoo     941.2958  459.9377    28.34081 1914.2185\n```\n:::\n:::\n\n\nUltimately, this model will produce posterior distributions that look very similar to the fixed effect model:\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![Posterior distribution of body mass (g) based on random intercepts for each penguin species.](index_files/figure-html/unnamed-chunk-18-1.png){fig-align='left' width=480}\n:::\n:::\n\n\nHowever, there is a key difference between the fixed and random effects models. The random effects model has a much greater amount of uncertainty when compared to the fixed effects. This can be seen in the following dotplot, which shows the coefficient estimates for each model and the error around these estimates.\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![Intercept and beta coefficients fixed and random effects models. Lines indicate estimated error.](index_files/figure-html/unnamed-chunk-19-1.png){fig-align='left' width=528}\n:::\n:::\n\n\nThere is a tendency to view high uncertainty as a marker of defeat. This should not be the case. Having a better estimation of model uncertainty (combined with good theory) is a necessary condition for valid causal inference.\n\n# Random slopes\n\nDifferent penguin species have different bill lengths. It certainly seems possible that these differences might predict body mass. We can examine this descriptively.\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![The relationship between bill length(mm) and body mass (g) for each penguin species.](index_files/figure-html/unnamed-chunk-20-1.png){fig-align='left' width=499.2}\n:::\n:::\n\n\nIf we use a line to describe these relatioships, we can see that some slopes are steeper than others. Chinstrap penguins, for example, seem to have more variation in the bill length, body mass relationship, especially compared to Gentoo, and then gives them a dampened slope.\n\nWe build on a random intercepts model by adding random slopes to the `|species` portion of the `brms` syntax:\n\n> `body_mass_g ~ (1 + bill_length_mm|species)`\n\nBefore we fit the model, we need to rescale the bill length variable. Although we are not setting any priors in this example, rescaling will makes it much easier to set sensible priors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd$bill_length_s <- scale(d$bill_length_mm)\n```\n:::\n\n\nNow let's fit the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmod2 <- brm(data = d, family = gaussian(),\n             body_mass_g ~ (1+bill_length_s|species))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nWhen we examine the random effects, we see estimates of how much each species differs from the global average (`Intercept`) and an estimate of the change in body mass for each unit change in bill length (`slope`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nranef(mod2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$species\n, , Intercept\n\n           Estimate Est.Error       Q2.5     Q97.5\nAdelie     252.8141  525.0505  -774.2875 1338.7514\nChinstrap -458.4793  531.3710 -1521.3775  634.3207\nGentoo     758.4599  522.1562  -255.0431 1838.9875\n\n, , bill_length_s\n\n          Estimate Est.Error     Q2.5    Q97.5\nAdelie    507.2517  62.37121 385.7620 628.5149\nChinstrap 301.4510  72.10868 160.8892 439.3606\nGentoo    595.2761  60.96895 477.4987 712.3207\n```\n:::\n:::\n\n\nThese relationships are much easier to understand if we make predictions. To do this using tidybayes, first call the data frame `d` and `group_by` each factor. In this case we only have `species`. Then, using the `modelr` package, we create a `data_grid`. These are the values of bill length that we want to make predictions for. Remember that bill length has been rescales, where a value of `0` is equal to the mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% group_by(species) %>%\n  data_grid(bill_length_s = seq(-3,3, length.out=40)) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n# Groups:   species [1]\n  species bill_length_s\n  <fct>           <dbl>\n1 Adelie          -3   \n2 Adelie          -2.85\n3 Adelie          -2.69\n4 Adelie          -2.54\n5 Adelie          -2.38\n6 Adelie          -2.23\n```\n:::\n:::\n\n\nWe place the model object inside `add_epred_draws` to make our predictions. This returns a tidy data frame where the column `.epred` contains the predictions for each value of bill length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd %>% group_by(species) %>%\n  data_grid(bill_length_s = seq(-3,3, length.out=40)) %>%\n  add_epred_draws(mod2, ndraws = 100) %>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n# Groups:   species, bill_length_s, .row [1]\n  species bill_length_s  .row .chain .iteration .draw .epred\n  <fct>           <dbl> <int>  <int>      <int> <int>  <dbl>\n1 Adelie             -3     1     NA         NA     1  2559.\n2 Adelie             -3     1     NA         NA     2  2885.\n3 Adelie             -3     1     NA         NA     3  2623.\n4 Adelie             -3     1     NA         NA     4  2737.\n5 Adelie             -3     1     NA         NA     5  2575.\n6 Adelie             -3     1     NA         NA     6  2888.\n```\n:::\n:::\n\n\nWe can use that tidy data frame to graph lines, or intervals, just as we normally would using `ggplot.` Let's recreate Figure 5.\n\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![Predicted relationships between bill length (mm) and body mass (g) for each species of penguin, with pbserved points overlayed.](index_files/figure-html/unnamed-chunk-27-1.png){fig-align='left' width=499.2}\n:::\n:::\n\n\n## Endnotes\n\n1.  As with all MCMC models, your results may differ slightly than mine. I did not bother to set the `seed =` parameter in `brm`, so you'll not be able to reproduce each decimal exactly.\n\n2.  I've hidden many of the plotting details for brevity. I can elaborate more on these in future posts. For now, check out the work of [Solomon Kurz](https://solomonkurz.netlify.app/) to learn more about using `tidyverse` and `tidybayes` to visualize Bayesian models.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}