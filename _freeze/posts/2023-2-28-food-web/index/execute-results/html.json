{
  "hash": "07ba2db4435c7df9b040aed503ece6d1",
  "result": {
    "markdown": "---\ntitle: \"Let's make some food webs\"\nauthor: \"Shane A. Scaggs\"\ndate: \"2023-2-8\"\ncategories: \n  - ecology\n  - structure\n  - simulation\n  - food webs\ndraft: no\n---\n\n\n\n\nFood webs are representations of the feeding relationships between plants, animals, and other organisms in an ecosystem. Ecologists will often use network graphs and network analysis to describe and analyze these feeding relationships. A major goal of theoretical ecology is coming up with models that can be used describe empirical food webs. A good place to start this process is by simulating feeding relationships. Network science and computation can help us do this.\n\nIn this post, I develop a simulation of a food web based on body size and dietary strategy. My goal is to understand some of the structural implications that arise from these two drivers. This is a work in progress.\n\n\n::: {.cell}\n\n:::\n\n\n## Species attributes\n\nThe first thing I'm going to do is generate some species attributes. These attributes includes things we might measure about species (e.g., body size) and categories we might place different species in (e.g., trophic level).\n\nFirst, I'll imagine I have 25 species from four different trophic levels: carnivore, omnivore, herbivore, and autotroph.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(777)\nN = 25\ntrophs = c('carn','omni','herb','auto')\n```\n:::\n\n\nI can sample with replacement from a vector of these trophic levels to assign each species to one of them. If I use the default `prob` in the sample function, each level is sampled with equal probability. This is something I might want to change to reflect empirical food webs. For example, there tend to be a lot of plants and carnivores, and relatively fewer omnivores and herbivores.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=384}\n:::\n:::\n\n\nNext, I need to assign each species a body size. This is somewhat awkward to do for plants (autotrophs), so for simplicity, I'll assume that plant body size refers to the total edible biomass of that particular plant, on average.\n\nSince body sizes are always positive, continuous values, I'll use a gamma distribution.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbody_size = rgamma(N, shape = 2)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=384}\n:::\n:::\n\n\nSo I have many species that are pretty small and some a bit larger. The units here are pretty arbitrary here but maybe I can think of them as hundreds of pounds?\n\nNow I can store all of these in a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd = data.frame(\n    species = 1:N, \n    troph = sample( trophs, size = N, replace = TRUE, prob =  c(0.3,0.1,0.1,0.5) ), \n    body_size = rgamma(N, shape = 2)\n)\nhead(d)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  species troph body_size\n1       1  auto 4.5290711\n2       2  auto 0.5468126\n3       3  carn 0.9878395\n4       4  auto 1.5093469\n5       5  auto 3.0427018\n6       6  carn 1.4672133\n```\n:::\n:::\n\n\n## Feeding relationships as dyads\n\nThe object of analysis in a food web is not the individual species -- it is the relationships between them. So I'll need to create a dyadic dataset. There are many simple ways to do this but I will do it in a slightly more complicated way so that the structure of the dataset is tidy.\n\nI begin by creating a grid of every pair of species.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = expand.grid(1:N, 1:N)\nhead(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Var1 Var2\n1    1    1\n2    2    1\n3    3    1\n4    4    1\n5    5    1\n6    6    1\n```\n:::\n:::\n\n\nNext I merge this grid twice with the individual attributes using first and second columns as primary keys to link the grid with the data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng = merge(g, d, by.x = 'Var1', by.y = 'species')\ng = merge(g, d, by.x = 'Var2', by.y = 'species')\nhead(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Var2 Var1 troph.x body_size.x troph.y body_size.y\n1    1    1    auto    4.529071    auto    4.529071\n2    1   15    carn    2.457736    auto    4.529071\n3    1   20    auto    2.457149    auto    4.529071\n4    1   22    carn    1.393432    auto    4.529071\n5    1   25    auto    0.524775    auto    4.529071\n6    1    6    carn    1.467213    auto    4.529071\n```\n:::\n:::\n\n\nThe result is a bit messy, so I'll do some rename and reordering to clean it up.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(g) = c('prey','pred','troph_pred','body_size_pred', 'troph_prey', 'body_size_prey')\n\n# tidy it up \ng = g %>% \n    arrange(pred,prey) %>%\n    mutate(dyad = 1:nrow(g)) %>%\n    select(pred, prey, dyad, troph_pred, troph_prey, body_size_pred, body_size_prey) \nhead(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  pred prey dyad troph_pred troph_prey body_size_pred body_size_prey\n1    1    1    1       auto       auto       4.529071      4.5290711\n2    1    2    2       auto       auto       4.529071      0.5468126\n3    1    3    3       auto       carn       4.529071      0.9878395\n4    1    4    4       auto       auto       4.529071      1.5093469\n5    1    5    5       auto       auto       4.529071      3.0427018\n6    1    6    6       auto       carn       4.529071      1.4672133\n```\n:::\n:::\n\n\nI've given an id to every dyad and I've tagged the predators and prey in each dyad. Thus you can read the original grid as column 1 eats column 2.\n\nNow I want to create some additional variables. The first is the difference between the body size of the predator and prey.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate body size differences \ng$body_size_diff = (g$body_size_pred - g$body_size_prey)+0.1 \n```\n:::\n\n\nI add 0.1 to the difference so that dyads which are the same species do not zero out. This is a little bit hacky but it is necessary for steps I'll take later on.\n\nThe other variables will index specific types of feed interactions. These are carnivory, omnivory, and herbivory. Although I know what the trophic level of each species is, I want to tag specific instances of these dietary strategies which helps me deal with the constraints each species has. For example, plants don't eat any species, while carnivores can only each omnivores or herbivores. This is a way of specifying which feeding relationships are actually possible.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# carnivores \ng$carnivory = ifelse(g$troph_pred == 'carn' & !g$troph_prey == 'auto', 1, 0)\n\n# omnivores \ng$omnivory = ifelse(g$troph_pred == 'omni' , 1, 0)\n\n# herbivory \ng$herbivory = ifelse(g$troph_pred == 'herb' & g$troph_prey == 'auto'  , 1, 0)\n```\n:::\n\n\nThe final data frame looks something like this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(g)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  pred prey dyad troph_pred troph_prey body_size_pred body_size_prey\n1    1    1    1       auto       auto       4.529071      4.5290711\n2    1    2    2       auto       auto       4.529071      0.5468126\n3    1    3    3       auto       carn       4.529071      0.9878395\n4    1    4    4       auto       auto       4.529071      1.5093469\n5    1    5    5       auto       auto       4.529071      3.0427018\n6    1    6    6       auto       carn       4.529071      1.4672133\n  body_size_diff carnivory omnivory herbivory\n1       0.100000         0        0         0\n2       4.082258         0        0         0\n3       3.641232         0        0         0\n4       3.119724         0        0         0\n5       1.586369         0        0         0\n6       3.161858         0        0         0\n```\n:::\n:::\n\n\n## Models\n\nWe're almost ready to simulate. Before we do, I'll talk a little bit about the two models I'm going to use.\n\n### A simple allometric model\n\nThe allometric model basically says that species will feed according to their body size. This implies that the probability of a feed relationship between any two species scales with body size. Here I am using a power function accomplish this:\n\n$p_{ij} = D_{ij}^\\alpha$\n\nThis says that the probability between any two species $ij$ is a function the difference between those two species ($D_{ij}$) raised to the power $\\alpha$. But if I run this as is...\n\n\n::: {.cell}\n\n```{.r .cell-code}\na = 1.15\nD = g$body_size_diff\np = sign(D)*abs(D)^a\n\n# look at first 10 values\np[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.07079458 5.04121914 4.42013512 3.70027192 1.70006271 3.75780028\n [7] 4.20830669 4.93041051 2.59683707 0.10331906\n```\n:::\n:::\n\n\nThere is a weird trick in here (`sign(D)*abs(D)^alpha`) because R will spit out some `NaN` values when we take a value to a non-integer power. See the discussion of this [here](https://stackoverflow.com/questions/32847363/weird-nan-when-raising-a-number-to-a-non-integer-power).\n\nThere is one problem with the values of `p` though; they are not probabilities. So we will need to convert them to probabilities using a logit link transformation. So the actual equation looks like this:\n\n$p_{ij} = logistic(D_{ij}^\\alpha)$\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# link functions \nlogit = function(p) {  log( p / (1 - p))  }\ninv_logit = function(x) { 1 / (1+ exp(-x) ) }\n\na = 1.15\nD = g$body_size_diff\np = inv_logit( sign(D)*abs(D)^a )\n\n# look at first 10 values\np[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.5176913 0.9935757 0.9881105 0.9758794 0.8455429 0.9771971 0.9853464\n [8] 0.9928283 0.9306577 0.5258068\n```\n:::\n:::\n\n\nThat looks a bit better.\n\n### Dietary model\n\nThe other model uses the index variables for feeding strategies to determine the probability of a link. This model essentially says that the probability of any given link is determined by the rate at which that feeding strategies occurs.\n\n$p_{ij} = logistic( \\beta_{C}C + \\beta_{O}O + \\beta_{H}H)$\n\nWe set that rate using beta coefficients on each of the index variables. Since any particular link can only be 1 strategy, the other strategies zero out of the equation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbC = 0.5\nbO = 0.5\nbH = 0.5\np = inv_logit( bC*g$carnivory + bO*g$omnivory + bC*g$omnivory )\n```\n:::\n\n\nIn practice, we might set specific rates for specific pairs of species, or give each species an offset. In this case, we just have a constant probability for each type of interaction.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}